import { ChainableHost } from "./hosts";
import * as ts from "./tsmod";
export declare class ModuleResolver extends ChainableHost {
    private compilerOptions;
    private cache;
    constructor(compilerOptions: ts.CompilerOptions, chainHost?: ChainableHost, id?: string);
    resolveModuleNames(moduleNames: string[], containingFile: string, reusedNames?: string[]): import("typescript").ResolvedModuleFull[];
    /**
     * Resolve a single module name to a file path
     * @param modName The module name, as specified in import/require
     * @param containingFile The path to the file that contains the import
     * @param runnable Return a file that can be executed, which means either
     *     a .js file or something that we know how to compile (ts, tsx).
     */
    resolveModuleName(modName: string, containingFile: string, runnable: boolean): import("typescript").ResolvedModuleFull | undefined;
    /**
     * Called by TS for module tracing and other debug output
     * @param s String to be printed to debug output stream
     */
    trace(s: string): void;
}
//# sourceMappingURL=modules.d.ts.map