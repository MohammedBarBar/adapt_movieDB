import { AdaptMountedElement } from "../jsx";
import { Waiting } from "./deploy_types";
import { EPNode, EPNodeId } from "./deploy_types_private";
/**
 * Keeps track of nodes for which the Element's deployedWhen method returned a
 * set of Handles that the Element is waiting on. As Handles become deployed,
 * it evaluates whether all of the mentioned Handles have now become deployed
 * and therefore the node might now be ready.
 */
export declare class DeployedWhenQueue {
    private debugId;
    private queues;
    constructor(debugId: (id: string, ...args: any[]) => void);
    /**
     * Enqueue a node. Should only be called if the node's Element deployedWhen
     * returned a Waiting object. If no Handles are referenced in the Waiting
     * object(s), the node is not queued.
     */
    enqueue(node: EPNode, id: EPNodeId, wStat: Waiting | Waiting[]): void;
    /**
     * Called to notify this DeployedWhenQueue that an Element has become
     * deployed. The callback is invoked once for each node that has now become
     * ready.
     */
    completed(el: AdaptMountedElement, cb: (n: EPNode) => void): void;
    private getQueue;
}
//# sourceMappingURL=deployed_when_queue.d.ts.map