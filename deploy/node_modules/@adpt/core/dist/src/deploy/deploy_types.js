"use strict";
/*
 * Copyright 2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@adpt/utils");
const lodash_1 = require("lodash");
const error_1 = require("../error");
var DeployStatus;
(function (DeployStatus) {
    DeployStatus["Initial"] = "Initial";
    DeployStatus["Waiting"] = "Waiting";
    DeployStatus["Deploying"] = "Deploying";
    DeployStatus["Destroying"] = "Destroying";
    //Retrying = "Retrying",
    // Final states
    DeployStatus["Deployed"] = "Deployed";
    DeployStatus["Failed"] = "Failed";
    DeployStatus["Destroyed"] = "Destroyed";
})(DeployStatus = exports.DeployStatus || (exports.DeployStatus = {}));
function isDeployStatus(val) {
    switch (val) {
        case DeployStatus.Initial:
        case DeployStatus.Waiting:
        case DeployStatus.Deploying:
        case DeployStatus.Destroying:
        //case DeployStatus.Retrying:
        case DeployStatus.Deployed:
        case DeployStatus.Failed:
        case DeployStatus.Destroyed:
            return true;
        default:
            return false;
    }
}
exports.isDeployStatus = isDeployStatus;
var InternalStatus;
(function (InternalStatus) {
    InternalStatus["ProxyDeploying"] = "ProxyDeploying";
    InternalStatus["ProxyDestroying"] = "ProxyDestroying";
})(InternalStatus = exports.InternalStatus || (exports.InternalStatus = {}));
// tslint:disable-next-line: variable-name
exports.DeployStatusExt = Object.assign({}, DeployStatus, InternalStatus);
function toDeployStatus(stat) {
    return (stat === exports.DeployStatusExt.ProxyDeploying ? DeployStatus.Deploying :
        stat === exports.DeployStatusExt.ProxyDestroying ? DeployStatus.Destroying :
            stat);
}
exports.toDeployStatus = toDeployStatus;
function isFinalStatus(ds) {
    switch (ds) {
        case DeployStatus.Deployed:
        case DeployStatus.Destroyed:
        case DeployStatus.Failed:
            return true;
        default:
            return false;
    }
}
exports.isFinalStatus = isFinalStatus;
// tslint:disable-next-line: variable-name
exports.GoalStatus = {
    Deployed: DeployStatus.Deployed,
    Destroyed: DeployStatus.Destroyed,
};
function isGoalStatus(ds) {
    switch (ds) {
        case DeployStatus.Deployed:
        case DeployStatus.Destroyed:
            return true;
        default:
            return false;
    }
}
exports.isGoalStatus = isGoalStatus;
function goalToInProgress(stat) {
    const ret = stat === DeployStatus.Deployed ? DeployStatus.Deploying :
        stat === DeployStatus.Destroyed ? DeployStatus.Destroying :
            undefined;
    if (!ret)
        throw new error_1.InternalError(`Bad GoalStatus '${stat}'`);
    return ret;
}
exports.goalToInProgress = goalToInProgress;
function isInProgress(stat) {
    return stat === exports.DeployStatusExt.Deploying || stat === exports.DeployStatusExt.Destroying;
}
exports.isInProgress = isInProgress;
function isProxying(stat) {
    return stat === exports.DeployStatusExt.ProxyDeploying ||
        stat === exports.DeployStatusExt.ProxyDestroying;
}
exports.isProxying = isProxying;
var DeployOpStatusExt;
(function (DeployOpStatusExt) {
    DeployOpStatusExt["StateChanged"] = "StateChanged";
})(DeployOpStatusExt = exports.DeployOpStatusExt || (exports.DeployOpStatusExt = {}));
// tslint:disable-next-line: variable-name
exports.DeployOpStatus = Object.assign({}, DeployStatus, DeployOpStatusExt);
var ChangeType;
(function (ChangeType) {
    ChangeType["none"] = "none";
    ChangeType["create"] = "create";
    ChangeType["delete"] = "delete";
    ChangeType["modify"] = "modify";
    ChangeType["replace"] = "replace";
})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
function isRelation(v) {
    return (utils_1.isObject(v) &&
        lodash_1.isString(v.description) &&
        lodash_1.isFunction(v.ready) &&
        (v.inverse === undefined || lodash_1.isFunction(v.inverse)) &&
        (v.relatesTo === undefined || Array.isArray(v.relatesTo)) &&
        (v.toString === undefined || lodash_1.isFunction(v.toString)));
}
exports.isRelation = isRelation;
exports.isDependsOn = isRelation;
//# sourceMappingURL=deploy_types.js.map