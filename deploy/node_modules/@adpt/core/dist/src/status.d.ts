import { DocumentNode as Query } from "graphql";
import { CustomError } from "ts-custom-error";
import { BuildData } from "./dom";
import { Variables } from "./observers/obs_manager_deployment";
import { ObserverNameHolder } from "./observers/registry";
export declare type ObserveForStatus<T = unknown> = (observer: ObserverNameHolder, query: Query, vars?: Variables) => Promise<T | undefined>;
export interface NoStatus {
    noStatus?: string | boolean;
}
export interface Status extends NoStatus {
    childStatus?: Status[];
    [key: string]: any;
}
export declare class NoStatusAvailable extends CustomError {
    constructor(message?: string);
}
export declare function noStatusOnError(f: () => unknown | Promise<unknown>): Promise<Status>;
export declare function errorToNoStatus(err: any): Status;
export declare function gqlGetOriginalErrors(err: any): Error[] | undefined;
export declare function defaultChildStatus<P extends object, S = unknown>(props: P, mgr: ObserveForStatus, data: BuildData): Promise<Status>;
export declare function defaultStatus<P extends object, S = unknown>(props: P, mgr: ObserveForStatus, data: BuildData): Promise<Status>;
export declare function noTransform(val: unknown): Status;
export declare function mergeDefaultChildStatus<P extends object, S extends object>(props: P, parentStatus: object | Promise<object>, mgr: ObserveForStatus, data: BuildData, transformParentStatus?: typeof noTransform): Promise<Status>;
//# sourceMappingURL=status.d.ts.map