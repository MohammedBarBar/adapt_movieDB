import { UserError } from "@adpt/utils";
import { CustomError } from "ts-custom-error";
export { InternalError } from "@adpt/utils";
export declare class BuildNotImplemented extends CustomError {
    constructor(message?: string);
}
export declare class ElementNotInDom extends CustomError {
    constructor(message?: string);
}
export declare class ProjectBuildError extends UserError {
    domXml: string;
    constructor(domXml: string);
}
export declare class ProjectCompileError extends CustomError {
    constructor(msg: string);
}
export declare class ProjectRunError extends CustomError {
    projectError: Error;
    projectStack: string;
    fullStack: string;
    constructor(projectError: Error, projectStack: string, fullStack: string);
}
export declare class ThrewNonError extends CustomError {
    thrown: any;
    constructor(thrown: any);
}
export declare function isError(val: any): val is Error;
export declare class DeployStepIDNotFound extends CustomError {
    constructor(opID: number, stepNum: number);
}
export declare class DeploymentNotActive extends CustomError {
    constructor(deployID: string);
}
export declare class DeploymentOpIDNotActive extends CustomError {
    constructor(deployID: string, opID: number);
}
//# sourceMappingURL=error.d.ts.map