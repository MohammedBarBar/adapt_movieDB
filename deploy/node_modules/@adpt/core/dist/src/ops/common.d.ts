import { Message, MessageClient, MessageLogger, MessageSummary, TaskObserver } from "@adpt/utils";
import { ObserversThatNeedData } from "../observers";
export interface ApiResponse {
    type: "success" | "error" | string;
    messages: ReadonlyArray<Message>;
    summary: MessageSummary;
}
export declare type DeployState = DeploySuccess | DeployError;
export interface DeploySuccess extends ApiResponse {
    type: "success";
    domXml: string;
    stateJson: string;
    needsData: ObserversThatNeedData;
    deployID: string;
    mountedOrigStatus: any;
}
export interface DeployError extends ApiResponse {
    type: "error";
    deployID?: string;
    domXml?: string;
    stateJson?: string;
}
export declare function isDeploySuccess(val: DeployState): val is DeploySuccess;
export interface WithLogger {
    client?: MessageClient;
    logger?: MessageLogger;
    loggerId?: string;
}
export interface DeployCommonOptions extends WithLogger {
    adaptUrl: string;
    fileName: string;
    debug?: string;
    dryRun?: boolean;
    projectRoot?: string;
}
export declare const defaultDeployCommonOptions: {
    debug: string;
    dryRun: boolean;
    projectRoot: undefined;
};
export interface DebugFlags {
    [flag: string]: true;
}
export declare function parseDebugString(s: string): DebugFlags;
export interface OpsSetupOptions extends WithLogger {
    name: string;
    description: string;
}
export interface OpsSetupInfo {
    logger: MessageLogger;
    taskObserver: TaskObserver;
}
export declare type OpsFunction<T extends ApiResponse> = (info: OpsSetupInfo) => T | Promise<T>;
export declare function withOpsSetup<T extends ApiResponse>(options: OpsSetupOptions, func: OpsFunction<T>): Promise<T>;
//# sourceMappingURL=common.d.ts.map