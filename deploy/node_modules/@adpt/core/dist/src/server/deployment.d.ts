import { ElementID } from "../jsx";
import { DeploymentInfo } from "../ops/listDeployments";
import { DeployOpID, DeployStepID, DeployStepInfo, ElementStatus, ElementStatusMap } from "./deployment_data";
import { HistoryEntry, HistoryName, HistoryStatus } from "./history";
import { AdaptServer } from "./server";
export interface Deployment {
    readonly deployID: string;
    getDataDir(withStatus: HistoryStatus): Promise<string>;
    releaseDataDir(): Promise<void>;
    commitEntry(toStore: HistoryEntry): Promise<void>;
    historyEntry(historyName: HistoryName): Promise<HistoryEntry>;
    lastEntry(withStatus: HistoryStatus): Promise<HistoryEntry | undefined>;
    currentOpID(): Promise<DeployOpID>;
    newOpID(): Promise<DeployOpID>;
    currentStepID(opID: DeployOpID): Promise<DeployStepID>;
    newStepID(opID: DeployOpID): Promise<DeployStepID>;
    status(stepID: DeployStepID): Promise<DeployStepInfo>;
    status(stepID: DeployStepID, info: Partial<DeployStepInfo>): Promise<void>;
    elementStatus(stepID: DeployStepID, elementID: ElementID): Promise<ElementStatus>;
    elementStatus(stepID: DeployStepID, statusMap: ElementStatusMap): Promise<void>;
}
export declare function encodePathComponent(comp: string): string;
export interface DeploymentOptions {
    deployID?: string;
}
export declare function createDeployment(server: AdaptServer, projectName: string, stackName: string, options?: DeploymentOptions): Promise<Deployment>;
export declare function loadDeployment(server: AdaptServer, deployID: string): Promise<Deployment>;
export declare function destroyDeployment(server: AdaptServer, deployID: string): Promise<void>;
export declare function listDeploymentIDs(server: AdaptServer): Promise<string[]>;
export declare function listDeployments(server: AdaptServer): Promise<DeploymentInfo[]>;
//# sourceMappingURL=deployment.d.ts.map