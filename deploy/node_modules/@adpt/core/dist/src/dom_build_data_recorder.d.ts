import { AdaptElement } from "./jsx";
import { StyleRule } from "./css";
export declare type BuildOp = BuildOpStart | BuildOpStep | BuildOpDefer | BuildOpBuildDeferred | BuildOpElementBuilt | BuildOpDescend | BuildOpAscend | BuildOpElementDone | BuildOpDone | BuildOpError;
export interface BuildOpStart {
    type: "start";
    root: AdaptElement;
    buildPass: number;
}
export interface BuildOpStep {
    type: "step";
    oldElem: AdaptElement;
    newElem: AdaptElement | null;
    style?: StyleRule;
}
export interface BuildOpDefer {
    type: "defer";
    elem: AdaptElement;
}
export interface BuildOpBuildDeferred {
    type: "buildDeferred";
    elem: AdaptElement;
}
export interface BuildOpElementBuilt {
    type: "elementBuilt";
    oldElem: AdaptElement;
    newElem: AdaptElement | null;
}
export interface BuildOpDescend {
    type: "descend";
    descendFrom: AdaptElement;
    descendTo: AdaptElement;
}
export interface BuildOpAscend {
    type: "ascend";
    ascendTo: AdaptElement;
    ascendFrom: AdaptElement;
}
export interface BuildOpElementDone {
    type: "elementDone";
    elem: AdaptElement;
}
export interface BuildOpDone {
    type: "done";
    root: AdaptElement | null;
}
export interface BuildOpError {
    type: "error";
    error: any;
}
export declare type BuildListener = (op: BuildOp) => void;
export declare function buildPrinter(): BuildListener;
//# sourceMappingURL=dom_build_data_recorder.d.ts.map