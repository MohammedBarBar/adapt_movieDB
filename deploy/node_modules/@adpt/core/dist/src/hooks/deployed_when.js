"use strict";
/*
 * Copyright 2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const imperative_1 = require("./imperative");
/**
 * Hook for adding a custom `deployedWhen` method to a function component.
 *
 * @remarks
 * Adding a custom `deployedWhen` method to a component allows the component to
 * directly control when the component can be considered deployed.
 *
 * For more information on using `deployedWhen` methods, see
 * {@link Adapt.DeployedWhenMethod}.
 *
 * For components that do not add a custom `deployedWhen` method, the
 * default behavior is that a component becomes deployed when all of it's
 * successors and children have been deployed. See {@link defaultDeployedWhen}
 * for more information.
 * @public
 */
function useDeployedWhen(deployedWhen, options = {}) {
    const methods = { deployedWhen };
    if (options.trivial === true)
        methods.deployedWhenIsTrivial = true;
    imperative_1.useImperativeMethods(() => methods);
}
exports.useDeployedWhen = useDeployedWhen;
//# sourceMappingURL=deployed_when.js.map