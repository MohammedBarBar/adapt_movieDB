import { GraphQLSchema } from "graphql";
import { ExecutedQuery } from "./obs_manager_deployment";
import { ObserverPlugin, ObserverResponse } from "./plugin";
import { MockObject } from "../../generated/src/observers/mock_observer_schema_types";
declare type CachedObject = Partial<MockObject> & {
    id: string;
    numericId: number;
};
interface CachedData {
    mockObjects: CachedObject[];
}
export declare class MockObserver implements ObserverPlugin {
    neverObserve: boolean;
    static observerName: string;
    static schema_: GraphQLSchema;
    static fetchSchema_: GraphQLSchema;
    constructor(neverObserve?: boolean);
    readonly schema: GraphQLSchema;
    observe: (possibleQueries: ExecutedQuery[]) => Promise<ObserverResponse<undefined, CachedData>>;
}
export default MockObserver;
//# sourceMappingURL=MockObserver.d.ts.map