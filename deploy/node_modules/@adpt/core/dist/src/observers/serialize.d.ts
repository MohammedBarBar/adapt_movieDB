import { ExecutedQuery, Observations } from "./obs_manager_deployment";
import { ObserverResponse } from "./plugin";
export declare function reconstituteObservations(observerName: string, candidate: unknown): ObserverResponse;
export declare function hasExecutedQueryShape(candidate: unknown): candidate is {
    query: string;
    variables?: object[];
};
export declare function reconstituteExecutedQuery(observerName: string, candidate: unknown): ExecutedQuery;
export declare function reconstituteExecutedQueries(observerName: string, candidate: unknown): ExecutedQuery[];
export declare function reconstituteObserverObservations(observerName: string, candidate: unknown): {
    observations: ObserverResponse<object, any>;
    queries: ExecutedQuery[];
};
export declare function reconstituteAllObservations(candidate: unknown): Observations;
export interface PreparedExecutedQuery {
    query: string;
    variables?: {
        [name: string]: any;
    };
}
export interface PreparedObservations {
    [observer: string]: {
        observations: ObserverResponse;
        queries: PreparedExecutedQuery[];
    };
}
export declare function prepareExecutedQuery(query: ExecutedQuery): PreparedExecutedQuery;
export declare function prepareAllObservationsForJson(observations: Observations): PreparedObservations;
//# sourceMappingURL=serialize.d.ts.map