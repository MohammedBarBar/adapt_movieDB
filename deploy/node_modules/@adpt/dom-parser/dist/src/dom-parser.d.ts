/// <reference types="node" />
import * as stream from "stream";
import { DOMNode } from "./dom";
export declare type XMLNode = GenericXMLNode | XMLPropsNode | XMLPropNode | XMLTextNode;
export interface GenericXMLNode {
    "#name": string;
    "$"?: Attrs;
    "$$"?: XMLNode[];
    "$ns"?: XMLNS;
}
export interface XMLPropsNode extends GenericXMLNode {
    "#name": "__props__";
    "$$"?: XMLPropNode[];
}
export interface XMLPropNode extends GenericXMLNode {
    "#name": "prop";
    "$$": XMLTextNode[];
}
export interface XMLLifecycleNode extends GenericXMLNode {
    "#name": "__lifecycle__";
    "$$"?: XMLLifecycleFieldNode[];
}
export interface XMLLifecycleFieldNode extends GenericXMLNode {
    "#name": "field";
    "$$": XMLTextNode[];
}
export interface XMLTextNode extends GenericXMLNode {
    "#name": "__text__";
    "_": string;
}
export interface XMLNS {
    local: string;
    uri: string;
}
export interface Attr {
    local: string;
    name: string;
    prefix: string;
    uri: string;
    value: any;
}
export interface Attrs {
    [key: string]: Attr;
}
export declare function handleShortProp(val: string): string | number;
export interface LifecycleInfo {
    stateNamespace: string[];
    keyPath: string[];
    path: string;
}
export declare function domFromXMLObj(xmlObj: XMLNode): Promise<DOMNode | null>;
export declare function domFromString(xmlStr: string): Promise<DOMNode | null>;
export declare function domFromStream(ins: stream.Readable): Promise<DOMNode | null>;
//# sourceMappingURL=dom-parser.d.ts.map