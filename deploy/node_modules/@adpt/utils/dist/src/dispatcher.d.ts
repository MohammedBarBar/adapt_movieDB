export interface CanDispatch<Ty extends string = string> {
    type: Ty;
}
export declare type Handler<Type extends string, T extends CanDispatch<Type>, Ret> = (t: Extract<T, {
    type: Type;
}>) => Ret;
export declare type TypesFor<T extends CanDispatch> = T["type"];
export declare class Dispatcher<T extends CanDispatch, Ret> {
    readonly name?: string | undefined;
    protected handlers: Map<T["type"], Handler<T["type"], T, Ret>>;
    constructor(name?: string | undefined);
    add<Type extends TypesFor<T>>(type: Type, handler: Handler<Type, Extract<T, {
        type: Type;
    }>, Ret>): void;
    dispatch(toHandle: T): Ret;
}
//# sourceMappingURL=dispatcher.d.ts.map