"use strict";
/*
 * Copyright 2018 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const ts_custom_error_1 = require("ts-custom-error");
class ValidationError extends ts_custom_error_1.CustomError {
    constructor(typeName, message) {
        let m = `Error validating ${typeName}`;
        if (message)
            m += ": " + message;
        super(m);
    }
}
exports.ValidationError = ValidationError;
function validProp(parentType, parent, prop, typeofProp, doThrow) {
    if (parent[prop] == null) {
        if (doThrow)
            throw new ValidationError(parentType, `${typeofProp} property '${prop}' is missing`);
        return false;
    }
    if (typeof parent[prop] !== typeofProp) {
        if (doThrow)
            throw new ValidationError(parentType, `property '${prop}' is not a ${typeofProp}`);
        return false;
    }
    return true;
}
function validProps(parentType, parent, props, doThrow) {
    if (parent == null || !lodash_1.isObject(parent)) {
        if (doThrow)
            throw new ValidationError(parentType, `not a valid object`);
        return false;
    }
    for (const prop of Object.keys(props)) {
        if (!validProp(parentType, parent, prop, props[prop], doThrow))
            return false;
    }
    return true;
}
/**
 * Validates whether properties on obj conform to propList.
 * Throws ValidationError on failure.
 */
function validateProps(expectedObjTypeName, obj, propList) {
    validProps(expectedObjTypeName, obj, propList, true);
}
exports.validateProps = validateProps;
/**
 * Returns true if obj has properties that conform to propList. False otherwise.
 */
function hasValidProps(obj, propList) {
    return validProps("unused", obj, propList, false);
}
exports.hasValidProps = hasValidProps;
//# sourceMappingURL=type_check.js.map