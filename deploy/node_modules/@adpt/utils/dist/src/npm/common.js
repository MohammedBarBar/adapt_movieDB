"use strict";
/*
 * Copyright 2018-2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const decamelize_1 = tslib_1.__importDefault(require("decamelize"));
const execa_1 = tslib_1.__importDefault(require("execa"));
exports.commonDefaults = {
    loglevel: "error",
    pipeOutput: false,
    progress: false,
};
function run(action, options, args) {
    // tslint:disable-next-line:prefer-const
    let _a = Object.assign({}, exports.commonDefaults, options), { cwd = null, pipeOutput } = _a, finalOpts = tslib_1.__rest(_a, ["cwd", "pipeOutput"]);
    cwd = cwd || process.cwd();
    let finalArgs = [action];
    for (const opt of Object.keys(finalOpts)) {
        const flag = "--" + decamelize_1.default(opt, "-");
        const val = finalOpts[opt];
        finalArgs = finalArgs.concat([flag, val.toString()]);
    }
    if (args)
        finalArgs = finalArgs.concat(args);
    try {
        const prom = execa_1.default("npm", finalArgs, { all: true, cwd, stripFinalNewline: false });
        if (pipeOutput) {
            prom.stdout.pipe(process.stdout);
            prom.stderr.pipe(process.stdout);
        }
        return prom;
    }
    catch (err) {
        err.message = `npm ${action} failed: ${err.message}`;
        if (err.all)
            err.message += "\n" + err.all;
        throw err;
    }
}
exports.run = run;
//# sourceMappingURL=common.js.map