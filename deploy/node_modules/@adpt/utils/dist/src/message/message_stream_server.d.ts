/// <reference types="node" />
import { Writable } from "stream";
import { Logger, Message, MessageLogger, MessageStore, MessageType } from "./common";
export interface MessageStreamServerOptions {
    parent?: MessageStreamServer;
    outStream?: Writable;
    store?: MessageStore;
    interceptStdio?: boolean;
}
export declare type WriteCallback = (error: Error | null | undefined) => void;
export declare class MessageStreamServer implements MessageLogger {
    readonly from: string;
    readonly outStream: Writable;
    readonly isMessageLogger: true;
    protected store: MessageStore;
    protected write: Writable["write"];
    protected intercepting: boolean;
    constructor(id: string, options?: MessageStreamServerOptions);
    readonly messages: readonly Message[];
    readonly summary: import("./common").MessageSummary;
    end: () => void;
    info: Logger;
    warning: Logger;
    error: Logger;
    log: (type: MessageType, arg: any, ...args: any[]) => void;
    append(toAppend: Message[]): void;
    message: (msg: Message, cb?: WriteCallback | undefined) => boolean;
    createChild(id: string): this;
    stopIntercept(): void;
    private intercept;
}
//# sourceMappingURL=message_stream_server.d.ts.map