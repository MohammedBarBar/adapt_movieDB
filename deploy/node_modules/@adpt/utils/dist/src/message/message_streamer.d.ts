/// <reference types="node" />
import stream from "stream";
import { Logger, Message, MessageLogger, MessageStore, MessageType } from "./common";
import { MessageStringOptions } from "./stringify";
export interface MessageStreamerOptions {
    outStream?: stream.Writable;
    errStream?: stream.Writable;
    parent?: MessageStreamer;
    store?: MessageStore;
    outputOptions?: MessageStringOptions;
}
export declare class MessageStreamer implements MessageLogger {
    readonly outStream?: stream.Writable;
    readonly errStream?: stream.Writable;
    readonly from: string;
    readonly isMessageLogger: true;
    readonly outputOptions: MessageStringOptions;
    protected store: MessageStore;
    constructor(id: string, options?: MessageStreamerOptions);
    readonly messages: readonly Message[];
    readonly summary: import("./common").MessageSummary;
    info: Logger;
    warning: Logger;
    error: Logger;
    log: (type: MessageType, arg: any, ...args: any[]) => void;
    append(toAppend: Message[]): void;
    message: (msg: Message) => void;
    createChild(id: string): this;
}
//# sourceMappingURL=message_streamer.d.ts.map