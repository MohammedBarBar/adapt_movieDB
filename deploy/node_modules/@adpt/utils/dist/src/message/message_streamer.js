"use strict";
/*
 * Copyright 2018-2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const common_1 = require("./common");
const stringify_1 = require("./stringify");
class MessageStreamer {
    constructor(id, options = {}) {
        this.isMessageLogger = true;
        this.info = (arg, ...args) => {
            this.log(common_1.MessageType.info, arg, ...args);
        };
        this.warning = (arg, ...args) => {
            this.log(common_1.MessageType.warning, arg, ...args);
        };
        this.error = (arg, ...args) => {
            this.log(common_1.MessageType.error, arg, ...args);
        };
        this.log = (type, arg, ...args) => {
            const m = {
                type,
                timestamp: Date.now(),
                from: this.from,
                content: util_1.format(arg, ...args),
            };
            stringify_1.logToStreams(m, this.outStream, this.errStream, this.outputOptions);
            this.message(m);
        };
        this.message = (msg) => {
            this.store.store(msg);
        };
        this.outStream = options.outStream || (options.parent && options.parent.outStream);
        this.errStream =
            options.errStream ||
                (options.parent && options.parent.errStream) ||
                this.outStream;
        this.store =
            options.store ||
                (options.parent && options.parent.store) ||
                new common_1.LocalStore();
        this.from = options.parent ? `${options.parent.from}:${id}` : id;
        this.outputOptions =
            options.outputOptions ||
                (options.parent && options.parent.outputOptions) ||
                {};
    }
    get messages() {
        return this.store.messages;
    }
    get summary() {
        return this.store.summary;
    }
    // FIXME(mark): This function is meant to help with the transition period
    // where some areas of code have not yet been updated to use a
    // MessageLogger. Any use of this function should be replaced with
    // direct use of MessageLogger instead.
    append(toAppend) {
        for (const m of toAppend) {
            this.message(m);
        }
    }
    createChild(id) {
        return new this.constructor(id, { parent: this });
    }
}
exports.MessageStreamer = MessageStreamer;
//# sourceMappingURL=message_streamer.js.map