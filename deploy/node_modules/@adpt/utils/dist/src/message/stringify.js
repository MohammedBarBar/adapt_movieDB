"use strict";
/*
 * Copyright 2018-2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const defaultOptions = {
    from: true,
    timestamp: true,
    type: true,
};
function messagesToString(msgs, filter, options = {}) {
    if (filter)
        msgs = msgs.filter((m) => m.type === filter);
    return msgs.map((m) => messageToString(m, options)).join("\n");
}
exports.messagesToString = messagesToString;
function messageToString(msg, options = {}) {
    const opts = Object.assign({}, defaultOptions, options);
    if (!(opts.from || opts.timestamp || opts.type))
        return msg.content;
    let ret = "";
    if (opts.timestamp)
        ret += (new Date(msg.timestamp)).toUTCString() + " ";
    if (opts.from)
        ret += `[${msg.from}] `;
    if (opts.type)
        ret += `${msg.type.toUpperCase()}`;
    ret += `: ${msg.content}`;
    return ret;
}
exports.messageToString = messageToString;
function getErrors(msgs) {
    return messagesToString(msgs, common_1.MessageType.error, { timestamp: false, type: false });
}
exports.getErrors = getErrors;
function getWarnings(msgs) {
    return messagesToString(msgs, common_1.MessageType.warning, { timestamp: false, type: false });
}
exports.getWarnings = getWarnings;
function logToStreams(msg, outStream, errStream, options = {}) {
    switch (msg.type) {
        case common_1.MessageType.error:
            if (errStream)
                errStream.write(messageToString(msg, options) + "\n");
            break;
        case common_1.MessageType.info:
        case common_1.MessageType.warning:
            if (outStream)
                outStream.write(messageToString(msg, options) + "\n");
            break;
    }
}
exports.logToStreams = logToStreams;
//# sourceMappingURL=stringify.js.map