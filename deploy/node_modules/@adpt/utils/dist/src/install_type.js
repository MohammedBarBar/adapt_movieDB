"use strict";
/*
 * Copyright 2020 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const find_up_1 = tslib_1.__importDefault(require("find-up"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = require("path");
/*
 * IMPORANT NOTE: As of global-dirs 2.0.1, the yarn path is often incorrect,
 * particularly when the user is root (as in a container).
 * See: https://github.com/sindresorhus/global-dirs/issues/13
 */
const global_dirs_1 = require("global-dirs");
var InstallType;
(function (InstallType) {
    InstallType["npm"] = "npm";
    InstallType["npmGlobal"] = "npmGlobal";
    InstallType["yarn"] = "yarn";
    InstallType["yarnGlobal"] = "yarnGlobal";
    InstallType["unknown"] = "unknown";
})(InstallType = exports.InstallType || (exports.InstallType = {}));
async function installType(path) {
    const dir = await getDir(path);
    if (isYarnGlobal(dir))
        return InstallType.yarnGlobal;
    if (isNpmGlobal(dir))
        return InstallType.npmGlobal;
    const manager = await findManager(dir);
    if (manager)
        return manager;
    return InstallType.unknown;
}
exports.installType = installType;
/**
 * Returns `true` if `path` is within a yarn global install directory.
 */
function isYarnGlobal(path) {
    const slashes = (s) => path_1.sep + s + path_1.sep;
    const winPath = path_1.join("Yarn", "Data", "global");
    const otherPath = path_1.join("yarn", "global");
    return path.includes(slashes(otherPath)) || path.includes(slashes(winPath));
}
/**
 * Returns `true` if `path` is within the npm global install directory.
 */
function isNpmGlobal(path) {
    return path.startsWith(global_dirs_1.npm.prefix) && !isYarnGlobal(path);
}
async function findManager(dir) {
    const lockFile = await find_up_1.default(["yarn.lock", "package-lock.json"], { cwd: dir });
    if (!lockFile)
        return undefined;
    if (lockFile.endsWith("yarn.lock"))
        return InstallType.yarn;
    return InstallType.npm;
}
async function getDir(path) {
    const stat = await fs_extra_1.default.stat(path_1.resolve(path));
    return stat.isDirectory() ? path : path_1.dirname(path);
}
//# sourceMappingURL=install_type.js.map