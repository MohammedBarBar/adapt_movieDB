import { ExecaChildProcess } from "execa";
export declare type LogLevel = "normal" | "silent" | "verbose";
export interface CommonOptions {
    cwd?: string;
    loglevel?: LogLevel;
    modulesFolder?: string;
    mutex?: string;
    noProgress?: boolean;
    registry?: string;
}
export interface InternalOptions extends CommonOptions {
    pipeOutput?: boolean;
    boolNoArgOptions?: string[];
}
interface AnyOptions {
    [key: string]: any;
}
export declare const commonDefaults: {
    loglevel: string;
    pipeOutput: boolean;
    noProgress: boolean;
};
/**
 * NOTE: This function is purposely NOT async.
 * The childProc object that execa returns gives the caller a lot of flexibility
 * in how to consume the results, especially including consuming the
 * output streams in real time, without waiting for the target process to exit.
 * So we take care to pass exactly that object back, NOT a promise to that object.
 */
export declare function run(action: string, options: InternalOptions & AnyOptions, args?: string[]): ExecaChildProcess;
export interface JsonMessage {
    type: string;
    data: any;
}
export declare function parseJsonMessages(output: string, typeFilter?: string): JsonMessage[];
export {};
//# sourceMappingURL=common.d.ts.map