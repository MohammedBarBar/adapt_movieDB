export interface PackageRegistry {
    findPath(moduleName: string, moduleVersion: string): Promise<string | undefined>;
}
export declare function createPackageRegistry(projectDir: string): PackageRegistry;
declare type PackageName = string;
declare type PackagePath = string;
interface PkgJson {
    name: string;
    version: string;
    dependencies?: {
        [name: string]: string;
    };
    [key: string]: string | object | undefined;
}
export declare class LazyPackageRegistry {
    nodeModulesDir: string;
    projectDir: string;
    pkgsToLoad?: Map<PackageName, PackagePath[]>;
    cache: Map<string, string>;
    constructor(projectDir: string);
    findPath: (pkgName: string, pkgVersion: string) => Promise<string | undefined>;
    scanProject(): Promise<void>;
    scanPackages(): Promise<Map<string, string[]>>;
    projectInfo(): Promise<PkgJson>;
    loadPackage(pkgName: string, pkgVersion: string): Promise<string | undefined>;
}
export {};
//# sourceMappingURL=package_registry.d.ts.map