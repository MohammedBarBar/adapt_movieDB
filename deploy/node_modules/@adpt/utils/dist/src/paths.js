"use strict";
/*
 * Copyright 2018-2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const url_1 = require("url");
/**
 * Given a directory path in the execution directory (i.e. "dist"), return
 * the corresponding source directory.
 * @param dirname Runtime execution directory to translate into source
 *     directory. Typically just pass your local __dirname for the current
 *     file. Must be absolute path.
 */
function sourceDir(dirname) {
    if (!path.isAbsolute(dirname)) {
        throw new Error(`'${dirname} is not an absolute path`);
    }
    return dirname.replace(RegExp(path.sep + "dist"), "");
}
exports.sourceDir = sourceDir;
/**
 * Given a directory path in the execution directory (i.e. "dist"), return
 * a set of directory paths for the enclosing NPM package.
 * @param dirname Runtime execution directory within an NPM package.
 *     Typically just pass your local __dirname for the current
 *     file.
 */
function findPackageDirs(dirname) {
    let root = null;
    let repoRoot = null;
    dirname = path.resolve(dirname);
    do {
        if (root == null) {
            const pkgJson = path.join(dirname, "package.json");
            if (fs.existsSync(pkgJson))
                root = dirname;
        }
        const dotGit = path.join(dirname, ".git");
        if (fs.existsSync(dotGit)) {
            repoRoot = dirname;
            break;
        }
        const parent = path.dirname(dirname);
        if (parent === dirname) {
            break;
        }
        dirname = parent;
    } while (true);
    if (root == null) {
        throw new Error(`Error finding package directories`);
    }
    return {
        root,
        repoRoot: repoRoot || "/dev/null",
        test: path.join(root, "test"),
        dist: path.join(root, "dist"),
    };
}
exports.findPackageDirs = findPackageDirs;
exports.utilsDirs = findPackageDirs(__dirname);
exports.repoRootDir = exports.utilsDirs.repoRoot;
exports.repoDirs = {
    "core": path.join(exports.repoRootDir, "core"),
    "cli": path.join(exports.repoRootDir, "cli"),
    "cloud": path.join(exports.repoRootDir, "cloud"),
    "dom-parser": path.join(exports.repoRootDir, "dom-parser"),
    "testutils": path.join(exports.repoRootDir, "testutils"),
    "utils": path.join(exports.repoRootDir, "utils"),
};
/**
 * Given a local file path, convert it to a file:// URL.
 * @param pathString Local filesystem path. If not absolute, path.resolve
 *     will be used to convert it to absolute first.
 */
function filePathToUrl(pathString) {
    pathString = path.resolve(pathString);
    const localUrl = new url_1.URL(`file:///${pathString}`);
    return localUrl.href;
}
exports.filePathToUrl = filePathToUrl;
//# sourceMappingURL=paths.js.map