"use strict";
/*
 * Copyright 2018-2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const exit_1 = require("./exit");
function mkdtmp(prefix, basedir = os.tmpdir()) {
    let newDir;
    let removeOnExit;
    const retP = fs.mkdtemp(path.join(basedir, prefix + "-"))
        .then((dir) => {
        newDir = dir;
        removeOnExit = exit_1.onExit(remove);
        return newDir;
    });
    // tslint:disable-next-line:prefer-object-spread
    return Object.assign(retP, { remove });
    async function remove() {
        if (newDir)
            await fs.remove(newDir);
        if (removeOnExit)
            removeOnExit();
    }
}
exports.mkdtmp = mkdtmp;
const withTmpDirDefaults = {
    prefix: "tmp",
    basedir: os.tmpdir(),
};
async function withTmpDir(f, options = {}) {
    const { basedir, prefix } = Object.assign({}, withTmpDirDefaults, options);
    const tmpDirP = mkdtmp(prefix, basedir);
    try {
        const tmpDir = await tmpDirP;
        return await f(tmpDir);
    }
    finally {
        await tmpDirP.remove();
    }
}
exports.withTmpDir = withTmpDir;
//# sourceMappingURL=mkdtmp.js.map