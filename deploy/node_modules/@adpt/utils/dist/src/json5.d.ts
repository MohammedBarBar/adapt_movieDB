import jju from "jju";
import { ReadonlyDeepT } from "type-ops";
import { AnyObject } from "./common_types";
export { stringify as stringifyJson5 } from "json5";
export declare type JsonValue = string | number | boolean | null | AnyObject | any[];
export declare type JsonValueReadonly = string | number | boolean | null | ReadonlyDeepT<AnyObject> | ReadonlyArray<any>;
/**
 * Reviver function from the standard JSON spec
 * @public
 */
export declare type JSONReviver = (key: any, value: any) => any;
/**
 * Options for {@link readJson5}.
 * @public
 */
export interface ReadOptions extends ParseOptions {
    encoding?: string;
    flag?: string;
}
/**
 * Read a file from disk and parse as JSON5.
 * @remarks
 * Intended to be a drop-in replacement for fs-extra's readJson. Also adds more
 * helpful error message upon parse failure.
 * @public
 */
export declare function readJson5(file: string, options?: ReadOptions): Promise<any>;
/**
 * Options for {@link parseJson5}.
 * @public
 */
export interface ParseOptions {
    /**
     * When true, if parsing fails and a `SyntaxError` is thrown, replace the
     * default `message` property * with one that includes the offending input
     * line and a pointer to the character column. The original error message
     * is available in the `originalMessage` property of the `SyntaxError`
     * object.
     * When false, errors thrown by the JSON5 parser are not modified.
     * @defaultValue true
     */
    prettyError?: boolean;
    reviver?: JSONReviver;
    /**
     * When true, JSON5 parsing errors will throw a `SyntaxError`.
     * When false, parsing errors will not throw and the function will return
     * `null`.
     * @defaultValue true
     */
    throws?: boolean;
}
/**
 * Parse a string with JSON5.
 * @remarks
 * Drop-in replacement for json5.parse and adds the 'throws' option from
 * fs-extra's readJson as well as more helpful error message upon parse
 * failure.
 * @public
 */
export declare function parseJson5(text: string, options?: ParseOptions | JSONReviver): any;
export interface Json5WriterReadOptions {
    encoding?: string;
    flag?: string;
    mustExist?: boolean;
    reviver?: JSONReviver;
}
export interface Json5WriterOptions {
    /**
     * Attempt to match the style present in the existing file.
     */
    matchStyle?: boolean;
    /**
     * If matchStyle is true, these options are only used if no file currently
     * exists. If matchStyle is false, these options are used on every update.
     */
    style?: jju.StringifyOptions;
}
/**
 * Make updates to a JSON/JSON5 config file that might be updated by humans.
 * Retains comments and optionally attempts to preserve style already present
 * in the file.
 */
export declare class Json5Writer {
    readonly filename: string;
    private _options;
    private _text?;
    private _value?;
    constructor(filename: string, options?: Json5WriterOptions);
    readonly text: string | undefined;
    readonly value: JsonValueReadonly | undefined;
    read(options?: Json5WriterReadOptions): Promise<string | number | boolean | Readonly<{
        [x: string]: any;
        [x: number]: any;
    }> | null | undefined>;
    update(newValue: JsonValueReadonly): Promise<void>;
}
export declare function createJson5Writer(filename: string, options?: Json5WriterOptions & Json5WriterReadOptions): Promise<Json5Writer>;
//# sourceMappingURL=json5.d.ts.map