import { Handle } from "@adpt/core";
import { Stage } from "../docker";
import { NetworkServiceScope } from "../NetworkService";
/** @public */
export declare type Match = MatchPath | MatchRegex;
/** @public */
export interface MatchPath {
    type: "path";
    path: string;
}
/** @public */
export interface MatchRegex {
    type: "regex";
    regex: string;
}
/** @public */
export declare type Destination = DestFiles;
/** @public */
export interface DestFiles {
    type: "files";
    filesRoot?: string;
}
/** @public */
export interface PathPair {
    src: string;
    dest: string;
}
/** @public */
export interface FilesLocal {
    type: "local";
    localRoot: string;
    files: PathPair[];
}
/** @public */
export interface FilesImageHandle {
    type: "image";
    image: Handle;
    files: PathPair[];
    stage: string;
}
/** @public */
export interface FilesImageResolved {
    type: "image";
    image: string;
    files: PathPair[];
    stage: string;
}
/** @public */
export declare type FilesResolved = FilesLocal | FilesImageResolved;
/** @public */
export declare type Files = FilesResolved | FilesImageHandle;
/** @public */
export declare function isFilesResolved(f: Files): f is FilesResolved;
/** @public */
export interface FilesInfo {
    dockerCommands: string;
    stage?: Stage;
}
/** @public */
export interface Location {
    match: Match;
    dest: Destination;
}
/** @public */
export interface VirtualServer {
    filesRoot?: string;
    locations: Location[];
}
/** @public */
export interface HttpServerProps {
    add: Files[];
    localAddRoot?: string;
    port: number;
    scope: NetworkServiceScope;
    servers?: VirtualServer[];
}
//# sourceMappingURL=http_server_types.d.ts.map